package com.example.login.api

/**
 * 登录回调接口
 * 
 * 🎯 设计目的：
 * 1. 处理异步登录操作的结果回调
 * 2. 提供类型安全的成功和失败处理
 * 3. 支持登录进度的实时反馈
 * 4. 统一不同登录方式的回调处理
 * 
 * 🏗️ 设计模式：
 * - 观察者模式：异步操作结果通知
 * - 回调模式：处理异步操作完成事件
 * - 策略模式：不同登录方式使用相同的回调接口
 * 
 * 📱 使用场景：
 * - 微信应用内登录结果处理
 * - 二维码登录状态更新和结果处理
 * - 游客登录结果处理
 * - 登录进度显示和用户反馈
 * 
 * 🎓 学习要点：
 * 1. 接口设计：简洁明确的方法定义
 * 2. 异步编程：回调机制的使用
 * 3. 错误处理：统一的错误处理方式
 * 4. 用户体验：进度反馈的重要性
 */
interface LoginCallback {
    
    /**
     * 登录成功回调
     * 
     * 🎯 回调时机：
     * 1. 微信授权成功并获取到用户信息
     * 2. 二维码扫码确认登录成功
     * 3. 游客登录创建成功
     * 4. 用户信息已保存到本地存储
     * 
     * @param result 登录成功结果，包含用户信息和登录类型
     * 
     * 实现建议：
     * - 更新UI显示登录状态
     * - 跳转到主界面或用户中心
     * - 显示欢迎信息
     * - 开始加载用户相关数据
     */
    fun onSuccess(result: LoginResult.Success)
    
    /**
     * 登录失败回调
     * 
     * 🎯 回调时机：
     * 1. 网络请求失败
     * 2. 用户取消登录操作
     * 3. 微信客户端未安装或版本过低
     * 4. 二维码过期或扫码失败
     * 5. 服务器认证失败
     * 
     * @param result 登录失败结果，包含错误类型、错误信息和原始异常
     * 
     * 实现建议：
     * - 根据错误类型显示相应的提示信息
     * - 提供重试或替代登录方式
     * - 记录错误日志用于问题排查
     * - 引导用户解决问题
     */
    fun onFailure(result: LoginResult.Failure)
    
    /**
     * 登录进度回调（可选实现）
     * 
     * 🎯 回调时机：
     * 1. 二维码生成完成
     * 2. 二维码被扫描
     * 3. 等待用户在微信中确认
     * 4. 二维码即将过期
     * 5. 网络请求进度更新
     * 
     * @param progress 登录进度信息，包含进度类型和相关数据
     * 
     * 实现建议：
     * - 显示加载动画或进度条
     * - 更新状态提示文本
     * - 显示二维码图片
     * - 提供取消操作选项
     * 
     * 为什么设计为可选？
     * 1. 不是所有登录方式都有进度概念
     * 2. 简化接口实现，避免空实现
     * 3. 向后兼容，新增功能不影响现有代码
     */
    fun onProgress(progress: LoginProgress) {
        // 默认空实现，子类可选择性重写
    }
}

/**
 * 内部登录回调接口
 * 
 * 🎯 设计目的：
 * 1. 供内部服务使用的回调接口
 * 2. 与对外API的LoginCallback解耦
 * 3. 提供更详细的内部状态信息
 * 4. 便于内部服务之间的通信
 * 
 * 为什么需要内部回调接口？
 * 1. 职责分离：内部实现与对外API分离
 * 2. 灵活性：内部可以有更复杂的回调逻辑
 * 3. 封装性：隐藏内部实现细节
 * 4. 可测试性：便于Mock和单元测试
 */
internal interface InternalLoginCallback {
    
    /**
     * 内部登录成功回调
     * 
     * @param user 登录成功的用户信息
     */
    fun onSuccess(user: User)
    
    /**
     * 内部登录失败回调
     * 
     * @param error 错误类型
     * @param message 错误信息
     * @param cause 原始异常（可选）
     */
    fun onFailure(error: LoginError, message: String, cause: Throwable? = null)
    
    /**
     * 内部登录进度回调（可选）
     * 
     * @param progress 进度信息
     */
    fun onProgress(progress: LoginProgress) {
        // 默认空实现
    }
}
