package com.example.mytranslator.presentation.ui.history

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import androidx.lifecycle.lifecycleScope
import androidx.lifecycle.repeatOnLifecycle
import androidx.lifecycle.Lifecycle
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.mytranslator.R
import com.example.mytranslator.data.local.database.TranslationDatabase
import com.example.mytranslator.databinding.FragmentTranslationHistoryBinding
import com.example.mytranslator.domain.usecase.HistoryResult
import com.example.mytranslator.domain.usecase.HistoryGroupData
import com.example.mytranslator.domain.usecase.SortOption
import com.example.mytranslator.domain.model.TranslationHistory
import com.example.mytranslator.presentation.viewmodel.*
import com.google.android.material.dialog.MaterialAlertDialogBuilder
import com.google.android.material.snackbar.Snackbar
import kotlinx.coroutines.launch

/**
 * ÁøªËØëÂéÜÂè≤ËÆ∞ÂΩïFragment
 *
 * üéØ ËÆæËÆ°ÁõÆÁöÑÔºö
 * 1. Â±ïÁ§∫ÁøªËØëÂéÜÂè≤ËÆ∞ÂΩïÂàóË°®
 * 2. Êèê‰æõÊêúÁ¥¢„ÄÅÁ≠õÈÄâ„ÄÅÊéíÂ∫èÂäüËÉΩ
 * 3. ÊîØÊåÅÊî∂Ëóè„ÄÅÂà†Èô§Á≠âÊìç‰Ωú
 * 4. ÂÆûÁé∞ÊµÅÁïÖÁöÑÁî®Êà∑‰∫§‰∫í‰ΩìÈ™å
 *
 * üèóÔ∏è UIÊû∂ÊûÑËÆæËÆ°Ôºö
 * - MVVMÊ®°ÂºèÔºö‰ΩøÁî®ViewModelÁÆ°ÁêÜÁä∂ÊÄÅ
 * - ViewBindingÔºöÁ±ªÂûãÂÆâÂÖ®ÁöÑËßÜÂõæÁªëÂÆö
 * - RecyclerViewÔºöÈ´òÊïàÁöÑÂàóË°®Â±ïÁ§∫
 * - Material DesignÔºöÁé∞‰ª£ÂåñÁöÑUIËÆæËÆ°
 *
 * üì± ÂäüËÉΩÁâπÊÄßÔºö
 * - Â§öÊ†áÁ≠æÈ°µÂ±ïÁ§∫ÔºàÂÖ®ÈÉ®„ÄÅÊî∂Ëóè„ÄÅ‰ªäÊó•Ôºâ
 * - ÂÆûÊó∂ÊêúÁ¥¢ÂíåÁ≠õÈÄâ
 * - ÊâπÈáèÈÄâÊã©ÂíåÊìç‰Ωú
 * - ‰∏ãÊãâÂà∑Êñ∞ÂíåÂä†ËΩΩÊõ¥Â§ö
 *
 * üéì Â≠¶‰π†Ë¶ÅÁÇπÔºö
 * FragmentÁöÑÁé∞‰ª£ÂåñÂºÄÂèëÊ®°ÂºèÔºö
 * 1. ViewBinding - Êõø‰ª£findViewById
 * 2. ViewModel - Áä∂ÊÄÅÁÆ°ÁêÜÂíå‰∏öÂä°ÈÄªËæë
 * 3. Flow - ÂìçÂ∫îÂºèÊï∞ÊçÆÁªëÂÆö
 * 4. Lifecycle - ÁîüÂëΩÂë®ÊúüÊÑüÁü•
 */
class TranslationHistoryFragment : Fragment() {

    companion object {
        private const val TAG = "TranslationHistoryFragment"
        
        /**
         * ÂàõÂª∫FragmentÂÆû‰æãÁöÑÂ∑•ÂéÇÊñπÊ≥ï
         */
        fun newInstance(): TranslationHistoryFragment {
            return TranslationHistoryFragment()
        }
    }

    // ===== ËßÜÂõæÁªëÂÆö =====
    
    private var _binding: FragmentTranslationHistoryBinding? = null
    private val binding get() = _binding!!

    // ===== ViewModel =====
    
    private val viewModel: TranslationHistoryViewModel by viewModels {
        HistoryViewModelFactory.create(requireContext())
    }

    // ===== ÈÄÇÈÖçÂô® =====
    
    private lateinit var historyAdapter: TranslationHistoryAdapter

    // ===== ÁîüÂëΩÂë®ÊúüÊñπÊ≥ï =====

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentTranslationHistoryBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        
        setupUI()
        setupRecyclerView()
        setupObservers()
        setupClickListeners()
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

    // ===== UIËÆæÁΩÆ =====

    /**
     * ËÆæÁΩÆUIÁªÑ‰ª∂
     */
    private fun setupUI() {
        // ËÆæÁΩÆÊ†áÈ¢ò
        binding.toolbarHistory.title = getString(R.string.history_title)

        // ËÆæÁΩÆËøîÂõûÊåâÈíÆ
        binding.toolbarHistory.setNavigationOnClickListener {
            requireActivity().onBackPressedDispatcher.onBackPressed()
        }

        // ËÆæÁΩÆ‰∏ãÊãâÂà∑Êñ∞
        binding.swipeRefreshLayout.setOnRefreshListener {
            refreshData()
        }

        // ËÆæÁΩÆÊ†áÁ≠æÈ°µ
        setupTabLayout()
    }

    /**
     * ËÆæÁΩÆÊ†áÁ≠æÈ°µ
     */
    private fun setupTabLayout() {
        with(binding.tabLayoutHistory) {
            addTab(newTab().setText(R.string.history_tab_all))
            addTab(newTab().setText(R.string.history_tab_favorites))
            addTab(newTab().setText(R.string.history_tab_today))
            
            addOnTabSelectedListener(object : com.google.android.material.tabs.TabLayout.OnTabSelectedListener {
                override fun onTabSelected(tab: com.google.android.material.tabs.TabLayout.Tab?) {
                    tab?.let {
                        val historyTab = when (it.position) {
                            0 -> HistoryTab.ALL
                            1 -> HistoryTab.FAVORITES
                            2 -> HistoryTab.TODAY
                            else -> HistoryTab.ALL
                        }
                        viewModel.switchTab(historyTab)
                    }
                }
                
                override fun onTabUnselected(tab: com.google.android.material.tabs.TabLayout.Tab?) {}
                override fun onTabReselected(tab: com.google.android.material.tabs.TabLayout.Tab?) {}
            })
        }
    }

    /**
     * ËÆæÁΩÆRecyclerView
     */
    private fun setupRecyclerView() {
        historyAdapter = TranslationHistoryAdapter(
            onItemClick = { translation ->
                // ÂØºËà™Âà∞ËØ¶ÊÉÖÈ°µÈù¢
                // TODO: ÂÆûÁé∞ËØ¶ÊÉÖÈ°µÈù¢ÂØºËà™
                showTranslationDetail(translation.id)
            },
            onFavoriteClick = { translation ->
                viewModel.toggleFavorite(translation.id)
            },
            onDeleteClick = { translation ->
                viewModel.deleteTranslation(translation.id)
            },
            onItemLongClick = { translation ->
                // ËøõÂÖ•ÈÄâÊã©Ê®°Âºè
                viewModel.toggleSelectionMode()
                viewModel.toggleItemSelection(translation.id)
                true
            }
        )
        
        binding.recyclerViewHistory.apply {
            layoutManager = LinearLayoutManager(requireContext())
            adapter = historyAdapter
            
            // Ê∑ªÂä†ÂàÜÈöîÁ∫ø
            addItemDecoration(
                androidx.recyclerview.widget.DividerItemDecoration(
                    requireContext(),
                    androidx.recyclerview.widget.DividerItemDecoration.VERTICAL
                )
            )
        }
    }

    /**
     * ËÆæÁΩÆÊï∞ÊçÆËßÇÂØüËÄÖ
     */
    private fun setupObservers() {
        // ËßÇÂØüUIÁä∂ÊÄÅ
        viewLifecycleOwner.lifecycleScope.launch {
            viewLifecycleOwner.repeatOnLifecycle(Lifecycle.State.STARTED) {
                viewModel.uiState.collect { state ->
                    updateUI(state)
                }
            }
        }
        
        // ËßÇÂØüÂéÜÂè≤ËÆ∞ÂΩïÊï∞ÊçÆ
        viewLifecycleOwner.lifecycleScope.launch {
            viewLifecycleOwner.repeatOnLifecycle(Lifecycle.State.STARTED) {
                viewModel.historyData.collect { result ->
                    handleHistoryResult(result)
                }
            }
        }
        
        // ËßÇÂØü‰∫ã‰ª∂
        viewLifecycleOwner.lifecycleScope.launch {
            viewLifecycleOwner.repeatOnLifecycle(Lifecycle.State.STARTED) {
                viewModel.events.collect { event ->
                    handleEvent(event)
                }
            }
        }
    }

    /**
     * ËÆæÁΩÆÁÇπÂáªÁõëÂê¨Âô®
     */
    private fun setupClickListeners() {
        // ÊêúÁ¥¢ÊåâÈíÆ
        binding.fabSearch.setOnClickListener {
            openSearchDialog()
        }
        
        // ËèúÂçïÊåâÈíÆ
        binding.toolbarHistory.setOnMenuItemClickListener { menuItem ->
            when (menuItem.itemId) {
                R.id.action_sort -> {
                    showSortDialog()
                    true
                }
                R.id.action_clear -> {
                    showClearDialog()
                    true
                }
                R.id.action_select_all -> {
                    selectAllItems()
                    true
                }
                else -> false
            }
        }
    }

    // ===== Êï∞ÊçÆÂ§ÑÁêÜ =====

    /**
     * Êõ¥Êñ∞UIÁä∂ÊÄÅ
     */
    private fun updateUI(state: HistoryUiState) {
        // Êõ¥Êñ∞Âä†ËΩΩÁä∂ÊÄÅ
        binding.swipeRefreshLayout.isRefreshing = state.isRefreshing
        
        // Êõ¥Êñ∞ÈÄâÊã©Ê®°Âºè
        updateSelectionMode(state)
        
        // Êõ¥Êñ∞ÈîôËØØÁä∂ÊÄÅ
        state.errorMessage?.let { message ->
            showError(message)
        }
    }

    /**
     * Â§ÑÁêÜÂéÜÂè≤ËÆ∞ÂΩïÁªìÊûú
     */
    private fun handleHistoryResult(result: HistoryResult) {
        when (result) {
            is HistoryResult.Success -> {
                showHistoryData(result.data)
                hideEmptyState()
            }
            
            is HistoryResult.Error -> {
                showError(result.message)
                showEmptyState("Âä†ËΩΩÂ§±Ë¥•")
            }
            
            is HistoryResult.Loading -> {
                // Âä†ËΩΩÁä∂ÊÄÅÂ∑≤ÈÄöËøáSwipeRefreshLayoutÊòæÁ§∫
            }
        }
    }

    /**
     * Â§ÑÁêÜ‰∫ã‰ª∂
     */
    private fun handleEvent(event: HistoryEvent) {
        when (event) {
            is HistoryEvent.ShowMessage -> {
                showMessage(event.message)
            }
            
            is HistoryEvent.ShowError -> {
                showError(event.message)
            }
            
            is HistoryEvent.ShowConfirmDialog -> {
                showConfirmDialog(event.title, event.message, event.onConfirm)
            }
            
            is HistoryEvent.NavigateToDetail -> {
                showTranslationDetail(event.translationId)
            }
            
            is HistoryEvent.NavigateToSearch -> {
                openSearchDialog()
            }
            
            is HistoryEvent.RefreshData -> {
                refreshData()
            }
        }
    }

    // ===== UIÊìç‰ΩúÊñπÊ≥ï =====

    /**
     * ÊòæÁ§∫ÂéÜÂè≤ËÆ∞ÂΩïÊï∞ÊçÆ
     */
    private fun showHistoryData(data: HistoryGroupData) {
        // Â∞ÜÂàÜÁªÑÊï∞ÊçÆËΩ¨Êç¢‰∏∫Âπ≥Èì∫ÂàóË°®
        val flatList = data.groups.flatMap { group ->
            listOf(HistoryListItem.Header(group.title, group.count)) + 
            group.items.map { HistoryListItem.Translation(it) }
        }
        
        historyAdapter.submitList(flatList)
        
        // Êõ¥Êñ∞ÁªüËÆ°‰ø°ÊÅØ
        updateStatistics(data.totalCount)
    }

    /**
     * ÊòæÁ§∫Á©∫Áä∂ÊÄÅ
     */
    private fun showEmptyState(message: String = "ÊöÇÊó†ÁøªËØëËÆ∞ÂΩï") {
        binding.layoutEmpty.visibility = View.VISIBLE
        binding.recyclerViewHistory.visibility = View.GONE
        binding.textEmptyMessage.text = message
    }

    /**
     * ÈöêËóèÁ©∫Áä∂ÊÄÅ
     */
    private fun hideEmptyState() {
        binding.layoutEmpty.visibility = View.GONE
        binding.recyclerViewHistory.visibility = View.VISIBLE
    }

    /**
     * Êõ¥Êñ∞ÈÄâÊã©Ê®°Âºè
     */
    private fun updateSelectionMode(state: HistoryUiState) {
        if (state.isSelectionMode) {
            // ËøõÂÖ•ÈÄâÊã©Ê®°Âºè
            binding.toolbarHistory.title = "Â∑≤ÈÄâÊã© ${state.getSelectedCount()} È°π"
            binding.fabSearch.hide()
            // ÊòæÁ§∫ÊâπÈáèÊìç‰ΩúÊåâÈíÆ
            showBatchActionButtons()
        } else {
            // ÈÄÄÂá∫ÈÄâÊã©Ê®°Âºè
            binding.toolbarHistory.title = getString(R.string.history_title)
            binding.fabSearch.show()
            // ÈöêËóèÊâπÈáèÊìç‰ΩúÊåâÈíÆ
            hideBatchActionButtons()
        }
        
        // Êõ¥Êñ∞ÈÄÇÈÖçÂô®ÁöÑÈÄâÊã©Áä∂ÊÄÅ
        historyAdapter.updateSelectionMode(state.isSelectionMode, state.selectedItems)
    }

    /**
     * ÊòæÁ§∫ÊâπÈáèÊìç‰ΩúÊåâÈíÆ
     */
    private fun showBatchActionButtons() {
        binding.layoutBatchActions.visibility = View.VISIBLE
        
        binding.buttonBatchDelete.setOnClickListener {
            val selectedIds = viewModel.uiState.value.selectedItems.toList()
            viewModel.deleteTranslationsBatch(selectedIds)
        }
        
        binding.buttonBatchFavorite.setOnClickListener {
            // TODO: ÂÆûÁé∞ÊâπÈáèÊî∂Ëóè
            showMessage("ÊâπÈáèÊî∂ËóèÂäüËÉΩÂºÄÂèë‰∏≠")
        }
    }

    /**
     * ÈöêËóèÊâπÈáèÊìç‰ΩúÊåâÈíÆ
     */
    private fun hideBatchActionButtons() {
        binding.layoutBatchActions.visibility = View.GONE
    }

    /**
     * Êõ¥Êñ∞ÁªüËÆ°‰ø°ÊÅØ
     */
    private fun updateStatistics(totalCount: Int) {
        binding.textStatistics.text = "ÂÖ± $totalCount Êù°ËÆ∞ÂΩï"
    }

    // ===== ÂØπËØùÊ°ÜÂíå‰∫§‰∫í =====

    /**
     * ÊòæÁ§∫ÊéíÂ∫èÂØπËØùÊ°Ü
     */
    private fun showSortDialog() {
        val options = arrayOf("ÊåâÊó∂Èó¥ÊéíÂ∫è", "Êåâ‰ΩøÁî®È¢ëÁéá", "ÊåâÂ≠óÊØçÈ°∫Â∫è", "ÊåâËØ≠Ë®ÄÂØπ")
        
        MaterialAlertDialogBuilder(requireContext())
            .setTitle("ÊéíÂ∫èÊñπÂºè")
            .setItems(options) { _, which ->
                val sortOption = when (which) {
                    0 -> SortOption.TIMESTAMP_DESC
                    1 -> SortOption.USAGE_COUNT_DESC
                    2 -> SortOption.ALPHABETICAL
                    3 -> SortOption.LANGUAGE_PAIR
                    else -> SortOption.TIMESTAMP_DESC
                }
                viewModel.updateSortOption(sortOption)
            }
            .show()
    }

    /**
     * ÊòæÁ§∫Ê∏ÖÁ©∫ÂØπËØùÊ°Ü
     */
    private fun showClearDialog() {
        MaterialAlertDialogBuilder(requireContext())
            .setTitle("Ê∏ÖÁ©∫ÂéÜÂè≤ËÆ∞ÂΩï")
            .setMessage("Á°ÆÂÆöË¶ÅÊ∏ÖÁ©∫ÊâÄÊúâÂéÜÂè≤ËÆ∞ÂΩïÂêóÔºüÊ≠§Êìç‰Ωú‰∏çÂèØÊí§ÈîÄ„ÄÇ")
            .setPositiveButton("Ê∏ÖÁ©∫") { _, _ ->
                viewModel.clearAllHistory(keepFavorites = true)
            }
            .setNegativeButton("ÂèñÊ∂à", null)
            .show()
    }

    /**
     * ÊâìÂºÄÊêúÁ¥¢ÂØπËØùÊ°Ü
     */
    private fun openSearchDialog() {
        // TODO: ÂÆûÁé∞ÊêúÁ¥¢ÂØπËØùÊ°ÜÊàñÂØºËà™Âà∞ÊêúÁ¥¢È°µÈù¢
        showMessage("ÊêúÁ¥¢ÂäüËÉΩÂºÄÂèë‰∏≠")
    }

    /**
     * ÊòæÁ§∫ÁøªËØëËØ¶ÊÉÖ
     */
    private fun showTranslationDetail(translationId: String) {
        // TODO: ÂÆûÁé∞ËØ¶ÊÉÖÈ°µÈù¢ÂØºËà™
        showMessage("ËØ¶ÊÉÖÈ°µÈù¢ÂºÄÂèë‰∏≠")
    }

    /**
     * ÂÖ®ÈÄâÈ°πÁõÆ
     */
    private fun selectAllItems() {
        // Ëé∑ÂèñÂΩìÂâçÊòæÁ§∫ÁöÑÊâÄÊúâÈ°πÁõÆID
        val allItemIds = historyAdapter.getAllTranslationIds()
        viewModel.toggleSelectAll(allItemIds)
    }

    /**
     * Âà∑Êñ∞Êï∞ÊçÆ
     */
    private fun refreshData() {
        // Êï∞ÊçÆ‰ºöÈÄöËøáViewModelËá™Âä®Âà∑Êñ∞
        binding.swipeRefreshLayout.isRefreshing = false
    }

    // ===== ËæÖÂä©ÊñπÊ≥ï =====

    /**
     * ÊòæÁ§∫Ê∂àÊÅØ
     */
    private fun showMessage(message: String) {
        Snackbar.make(binding.root, message, Snackbar.LENGTH_SHORT).show()
    }

    /**
     * ÊòæÁ§∫ÈîôËØØ
     */
    private fun showError(message: String) {
        Snackbar.make(binding.root, message, Snackbar.LENGTH_LONG)
            .setAction("ÈáçËØï") { refreshData() }
            .show()
    }

    /**
     * ÊòæÁ§∫Á°ÆËÆ§ÂØπËØùÊ°Ü
     */
    private fun showConfirmDialog(title: String, message: String, onConfirm: () -> Unit) {
        MaterialAlertDialogBuilder(requireContext())
            .setTitle(title)
            .setMessage(message)
            .setPositiveButton("Á°ÆÂÆö") { _, _ -> onConfirm() }
            .setNegativeButton("ÂèñÊ∂à", null)
            .show()
    }
}
